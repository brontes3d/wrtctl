#!/bin/bash
testdir="$(dirname $(readlink -f $0))"
topdir="$(readlink -f ${testdir}/../)"

port="2450"
moddir="@TOP_BUILDDIR@/src/mods/.libs/"

wrtctldp="@TOP_BUILDDIR@/src/bin/wrtctld -p ${port} -M ${moddir} -f -v"
wrtctlp="@TOP_BUILDDIR@/src/bin/wrtctl -p ${port} -t localhost"
key_path="${testdir}/stunnel.pem"

export WRTCTL_UCI_CONFDIR=${testdir}/config
export WRTCTL_UCI_SAVEDIR=${testdir}/savedir
export WRTCTL_SYS_INITD_DIR=@TOP_SRCDIR@/test/systest
export WRTCTL_SYS_REBOOT_CMD=@TOP_SRCDIR@/test/systest/shutdown

create_conf_file() {
   mkdir -p ${WRTCTL_UCI_CONFDIR} >/dev/null
   mkdir -p ${WRTCTL_UCI_SAVEDIR} >/dev/null
   cat <<-EOF > ${WRTCTL_UCI_CONFDIR}/test
config 'anon_section'
    option 'first_opt' '1'
    option 'second_opt' '2'

config 'anon_section'
    option 'first_opt' '3'
    option 'second_opt' '4'

config 'section_type' 'section_name'
    option 'optA' 'A'
    option 'optB' 'B'
EOF
    rm -f ${WRTCTL_UCI_SAVEDIR}/test
}

grep_file() {
    local str=$1
    local f=$2

    if [ -z "${str}" ]; then
        [ ! -s "${f}" ]
        return $?
    elif ! grep -E "${str}" ${2} >/dev/null; then
        echo
        echo "   ERROR:  Did not find '$str' in $2";
        return 1
    fi
}

run_test() {
    local t=$1
    local r=$2
    local str=$3
    local cmd=$4
    local exe=$5


    case "${t}" in
        "run")
            printf "${cmd}" | ${exe} &>test.log;rc=$?
            if [[ ${rc} -ne ${r} ]]; then
                echo
                echo "   ERROR:  Return ${rc} != ${r}"
                echo "     Executable: ${exe}"
                echo "     Command:    ${cmd}"
                return 1
            fi

            if [ -n "${str}" ]; then
                if ! grep_file "${str}" test.log; then
                    echo
                    echo "   ERROR:  Unexpected output in test.log"
                    echo "     Expected: ${str}"
                    echo "     Executable: ${exe}"
                    echo "     Command:    ${cmd}"
                    return 1
                fi
            fi
            ;;

        "grep")
            if ! grep_file "${str}" "${cmd}"; then
                echo "   ERROR:  Unexpected output in file ${cmd}"
                echo "     Expected: ${str}"
                return 1
            fi
            ;; 

        "exist")
            [ -s "${str}" ]; rc=$?
            if [[ ${rc} -ne ${r} ]]; then
                echo
                echo "   ERROR:  File (not)expected: ${str}"
                return 1
            fi
            ;;
    esac
    return 0
}

fail() {
    echo "Failed"
    kill ${wrtctld_pid} &>/dev/null
    wait ${wrtctld_pid}
    exit 1
}

uci_tests=(
# uci:get
    "run"   0   "test\.cfg[0-9]+\.first_opt=1"              "uci:get test..first_opt"
    "run"   0   "test\.@anon_section\[0\].first_opt=1"      "uci:get test.@anon_section[0].first_opt"
    "run"   0   "test\.@anon_section\[1\].first_opt=3"      "uci:get test.@anon_section[1].first_opt"
    "run"   0   "test\.section_name.optA=A"                 "uci:get test.section_name.optA"
    "run"   0   "test\.section_name.optA=A"                 "uci:get test..optA"
    "run"   1   "3, test.blah.blah not found"               "uci:get test.blah.blah"
    "run"   1   "3, uci_lookup_ptr: Entry not found"        "uci:get blah.blah.blah"
    "run"   0   ""                                          "uci:set test..first_opt=was_set"
# uci:set uci:commit
    "grep"  0   "first_opt=was_set"                         "${WRTCTL_UCI_SAVEDIR}/test"
    "run"   0   ""                                          "uci:set test..first_opt=was_set2"
    "grep"  0   "first_opt=was_set2"                        "${WRTCTL_UCI_SAVEDIR}/test"
    "run"   0   ""                                          "uci:commit"
    "run"   0   "test\.cfg[0-9]+\.first_opt=was_set2"       "uci:get test..first_opt"
    "grep"  0   "'first_opt' 'was_set2'"                    "${WRTCTL_UCI_CONFDIR}/test"
    "run"   0   ""                                          "uci:set test.@anon_section[0].first_opt=set3"
    "grep"  0   "first_opt=set3"                            "${WRTCTL_UCI_SAVEDIR}/test"
    "run"   0   ""                                          "uci:commit test"
    "run"   0   "test\.@anon_section\[0\].first_opt=set3"   "uci:get test.@anon_section[0].first_opt"
    "run"   1   "3, uci_cmd_set:uci_fill_section: Entry not found"
                                                            "uci:set blah..first_opt=blah"
    "run"   1   "2, uci_set: Invalid argument"              "uci:set test.blah.first_opt=blah"
    "run"   1   "3, uci_load_package: Entry not found"      "uci:commit blah"
    "exist" 1   "${WRTCTL_UCI_SAVEDIR}/blah"                ""
    "exist" 1   "${WRTCTL_UCI_CONFDIR}/blah"                ""
# uci:revert
    "run"   0   ""                                          "uci:set test..first_opt=was_set"
    "run"   0   ""                                          "uci:revert"
    "exist" 1   "${WRTCTL_UCI_SAVEDIR}/test"                ""
    "run"   0   ""                                          "uci:set test..first_opt=was_set2"
    "run"   0   ""                                          "uci:revert test"
    "exist" 1   "${WRTCTL_UCI_SAVEDIR}/test"                ""
    "run"   0   ""                                          "uci:set test..first_opt=was_set2"
    "run"   0   ""                                          "uci:revert test..first_opt"
    "exist" 1   "${WRTCTL_UCI_SAVEDIR}/test"                ""
    #"run"   0   "test\.cfg[0-9a-z]+\.first_opt=set3"        "uci:get test..first_opt"
    "run"   0   ""                                          "uci:commit"
    "run"   0   "test\.section_name.optA=A"                 "uci:get test.section_name.optA"
    "run"   0   ""                                          "uci:delete test.section_name.optA"
    "run"   1   "3, test.section_name.optA not found"       "uci:get test.section_name.optA"
    "run"   0   ""                                          "uci:commit test"
    "run"   1   "3, test.section_name.optA not found"       "uci:get test.section_name.optA"
)

daemon_tests=(
    "run"   0   "^[0-9]+$"                                  "daemon:ping"
    "run"   0   "Rebooting\.\.\."                           "daemon:reboot"
)

daemon_bad_path_tests=(
    "run"   1   "2, access:  No such file or directory"     "daemon:reboot"
)

daemon_noexec_tests=(
    "run"   1   "13, access:  Permission denied"            "daemon:reboot"
)

sys_tests=(
    "run"   0   "initd.test start success"                  "sys:initd initd.test start"
    "grep"  0   "initd.test: start"                         "@TOP_BUILDDIR@/test/initd.test.log"
    "run"   0   "initd.test stop success"                   "sys:initd initd.test stop"
    "grep"  0   "initd.test: stop"                          "@TOP_BUILDDIR@/test/initd.test.log"
    "run"   1   "Invalid argument to sys\.initd"            "sys:initd initd.test invalid"
    "run"   1   "22, Invalid init command"                  "sys:initd initd.test startblah"
    "run"   1   "1, access:  No such file or directory"     "sys:initd nofile start"
    "run"   1   "1, access:  No such file or directory"     "sys:initd /this/bad/path start"
)

sys_noexe_tests=(
    "run"   1   "1, access:  Permission denied"             "sys:initd initd.test start"
)

run_uci_tests() {
    local i

    printf "%-50s" "Testing UCI commands"
    for ((i=0; i<${#uci_tests[@]}; i+=4)); do
        run_test \
            "${uci_tests[i]}" \
            "${uci_tests[i+1]}" \
            "${uci_tests[i+2]}" \
            "${uci_tests[i+3]}" \
            "${wrtctlp} -f - $*" \
            || fail
    done
    echo "OK"
}

run_daemon_tests() {
    local i
    local op=${WRTCTL_SYS_REBOOT_CMD}

    printf "%-50s" "Testing daemon commands"
   
    chmod +x ${op}
    for ((i=0; i<${#daemon_tests[@]}; i+=4)); do
        run_test \
            "${daemon_tests[i]}" \
            "${daemon_tests[i+1]}" \
            "${daemon_tests[i+2]}" \
            "${daemon_tests[i+3]}" \
            "${wrtctlp} -f - $*" \
            || fail
    done

    stop_daemon
    export WRTCTL_SYS_REBOOT_CMD=/path/does/not/exist
    start_daemon
    for ((i=0; i<${#daemon_bad_path_tests[@]}; i+=4)); do
        run_test \
            "${daemon_bad_path_tests[i]}" \
            "${daemon_bad_path_tests[i+1]}" \
            "${daemon_bad_path_tests[i+2]}" \
            "${daemon_bad_path_tests[i+3]}" \
            "${wrtctlp} -f - $*" \
            || fail
    done

    stop_daemon
    export WRTCTL_SYS_REBOOT_CMD=${op}
    start_daemon
    chmod -x ${op}
    for ((i=0; i<${#daemon_noexe_tests[@]}; i+=4)); do
        run_test \
            "${daemon_noexe_tests[i]}" \
            "${daemon_noexe_tests[i+1]}" \
            "${daemon_noexe_tests[i+2]}" \
            "${daemon_noexe_tests[i+3]}" \
            "${wrtctlp} -f - $*" \
            || fail
    done
    echo "OK"
}

run_sys_tests() {
    local i 
    local it="${WRTCTL_SYS_INITD_DIR}/initd.test"
   
    chmod +x ${it}
    for ((i=0; i<${#sys_tests[@]}; i+=4)); do
        run_test \
            "${sys_tests[i]}" \
            "${sys_tests[i+1]}" \
            "${sys_tests[i+2]}" \
            "${sys_tests[i+3]}" \
            "${wrtctlp} -f - $*" \
            || fail
    done

    chmod -x ${it}
    for ((i=0; i<${#sys_noexe_tests[@]}; i+=4)); do
        run_test \
            "${sys_noexe_tests[i]}" \
            "${sys_noexe_tests[i+1]}" \
            "${sys_noexe_tests[i+2]}" \
            "${sys_noexe_tests[i+3]}" \
            "${wrtctlp} -f - $*" \
            || fail
    done
    echo "OK"
}

start_daemon() {
    local args=""
    [ @STUNNEL@ -eq 1 ] && args="-k ${key_path}"

    ${wrtctldp} ${args} -m sys-cmds,uci-cmds &> wrtctld.log &
    wrtctld_pid=$!
    sleep 0.1
    if ! kill -0 ${wrtctld_pid} &>/dev/null; then
        echo "ERROR:  Failed to start ${wrtctldp} ${args} -m sys-cmds,uci-cmds"
        fail
    fi
}

stop_daemon() {
    if ! killall wrtctld && ! killall lt-wrtctld; then
        echo "ERROR:  Failed to killall lt-wrtctld"
        fail
    fi
    wait
}

start_daemon
create_conf_file

if [ @STUNNEL@ -eq 0 ]; then
    run_uci_tests
    run_daemon_tests
    run_sys_tests
else 
    echo
    echo "Testing without stunnel wrapper"
    echo
    run_uci_tests -n
    run_daemon_tests -n
    run_sys_tests -n
    stop_daemon
    echo
    echo "Testing with stunnel wrapper"
    echo
    create_conf_file
    start_daemon
    run_uci_tests -k "${key_path}"
    run_daemon_tests -k "${key_path}"
    run_sys_tests -k "${key_path}"
fi
create_conf_file
stop_daemon
exit 0
